{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAA,iEAAe,2BAA2B,EAAC;;;;;;;;;;;;;;;;;;ACA3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AAC8D;;;;;;;UCzC9D;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNgC;AACwB;AACxD;AACA;AACA,gDAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,EAAE,sDAAS;AACX,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,0DAAa;AACf","sources":["webpack://todo-list/./src/content.js","webpack://todo-list/./src/createToDo.js","webpack://todo-list/webpack/bootstrap","webpack://todo-list/webpack/runtime/define property getters","webpack://todo-list/webpack/runtime/hasOwnProperty shorthand","webpack://todo-list/webpack/runtime/make namespace object","webpack://todo-list/./src/index.js"],"sourcesContent":["export default console.log(\"Hello There!\");\r\n","/*  factory Function to create new ToDo Items\r\n    Every object Should have | Title, Description, Due Date, Priority, Checkbox(True == Completed), Id |\r\n\r\n    For Testing\r\n    createNewToDo(\"a\", \"a\", \"a\", \"top\", true);\r\n    let test1 = createNewToDo(\"b\", \"b\", \"b\", \"mid\", true);\r\n    let test2 = createNewToDo(\"c\", \"c\", \"c\", \"bottom\", false);\r\n\r\n*/\r\n\r\nlet id = 1;\r\nlet allToDoArray = [];\r\n\r\nfunction generateId() {\r\n  let test = id++;\r\n  return test;\r\n}\r\n\r\nfunction createNewToDo(title, Desc, date, priority, completed = false) {\r\n  let todo = {\r\n    Title: title,\r\n    Description: Desc,\r\n    DueDate: date,\r\n    Priority: priority,\r\n    Completed: completed,\r\n    Id: generateId(),\r\n  };\r\n  allToDoArray.push(todo);\r\n\r\n  return todo;\r\n}\r\n\r\nfunction checkToDo() {\r\n  if (allToDoArray.length < 1) {\r\n    return console.log(\"empty\");\r\n  }\r\n  allToDoArray.forEach((item) => {\r\n    console.table(item);\r\n  });\r\n}\r\n\r\nexport { createNewToDo, generateId, checkToDo, allToDoArray };\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import content from \"./content\";\r\nimport { createNewToDo, checkToDo } from \"./createToDo\";\r\n\r\nconsole.log(\"Greetings, General Kenobi!\");\r\ncontent;\r\n\r\nlet popup = document.getElementById(\"popup\");\r\n// createNewToDo(\"a\", \"a\", \"a\", \"top\", true);\r\n\r\nconst renderBodyElements = (function () {\r\n  let openPopupBtn = document.querySelector(\".btn-create-todo\");\r\n  let closePopupBtn = document.querySelector(\".popup-btn-exit\");\r\n  let newToDoItem = document.querySelector(\".popup-btn-add\");\r\n  let popup = document.getElementById(\"popup\");\r\n  let formTitle = document.querySelector(\"#title\");\r\n  let formDesc = document.querySelector(\"#description\");\r\n  let formPriority = document.querySelector(\"#priority\");\r\n  let formDueDate = document.querySelector(\"#duedate\");\r\n  return {\r\n    openPopupBtn,\r\n    closePopupBtn,\r\n    newToDoItem,\r\n    popup,\r\n    formTitle,\r\n    formDesc,\r\n    formPriority,\r\n    formDueDate,\r\n  };\r\n})();\r\n\r\n// Event Listeners For opening & Closing Form\r\nrenderBodyElements.openPopupBtn.addEventListener(\"click\", () => {\r\n  if (popup.classList.contains(\"open-popup\")) {\r\n    closePopup();\r\n    resetForm();\r\n  } else {\r\n    showPopup();\r\n  }\r\n});\r\n\r\n// Listener On Form Close Btn\r\nrenderBodyElements.closePopupBtn.addEventListener(\"click\", () => {\r\n  closePopup();\r\n  resetForm();\r\n});\r\n\r\n// Listener ADD TODO\r\nrenderBodyElements.newToDoItem.addEventListener(\"click\", () => {\r\n  newToDo();\r\n  resetForm();\r\n  checkToDo();\r\n});\r\n\r\n// Functions for Removing Open/Close Popup CLASS\r\nconst showPopup = () => {\r\n  renderBodyElements.popup.classList.add(\"open-popup\");\r\n};\r\nconst closePopup = () => {\r\n  renderBodyElements.popup.classList.remove(\"open-popup\");\r\n};\r\n\r\n// Reset Form Values Function\r\nconst resetForm = () => {\r\n  renderBodyElements.formTitle.value = null;\r\n  renderBodyElements.formDesc.value = null;\r\n  renderBodyElements.formDueDate.value = null;\r\n  renderBodyElements.formPriority.value = \"low\";\r\n};\r\n\r\nconst newToDo = () => {\r\n  let title = renderBodyElements.formTitle.value;\r\n  let desc = renderBodyElements.formDesc.value;\r\n  let dueDate = renderBodyElements.formDueDate.value;\r\n  let prio = renderBodyElements.formPriority.value;\r\n  let done = false;\r\n  createNewToDo(title, desc, dueDate, prio, done);\r\n};\r\n"],"names":[],"sourceRoot":""}